"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[790],{93610:e=>{e.exports=JSON.parse('{"functions":[{"name":"cmp","desc":"Compare the major, minor, patch, [Prerelease] and [BuildMetadata] value of two [Versions](Version).\\n\\n**Usage:**\\n```lua\\n-- Sort versions array\\nlocal versions = { \\"3.1.2\\", \\"1.0.0\\", \\"1.0.0-rc.1\\", \\"1.0.0-rc.2\\", \\"0.3.0-alpha\\", \\"0.3.0-beta\\" }\\ntable.sort(versions, function(a, b)\\n\\treturn Semver.cmp(a, \\"<\\", b)\\nend)\\n```","params":[{"name":"lhs","desc":"","lua_type":"string"},{"name":"op","desc":"","lua_type":"\\"<\\" | \\"<=\\" | \\"==\\" | \\">\\" | \\">=\\" | \\"~=\\""},{"name":"rhs","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":41,"path":"lib/Semver/init.luau"}},{"name":"cmpPrecedence","desc":"Compare the major, minor, patch, and [Prerelease] value of two [Versions](Version),\\ndisregarding [BuildMetadata]. Versions that differ only in build metadata\\nare considered equal. This comparison is what the SemVer spec refers to\\nas \\"precedence\\".\\n\\n**Usage:**\\n```lua\\nassert(Semver.cmpPrecedence(newVersion, \\">=\\", oldVersion), \\"newVersion must be >= oldVersion\\")\\n```","params":[{"name":"lhs","desc":"","lua_type":"string"},{"name":"op","desc":"","lua_type":"\\"<\\" | \\"<=\\" | \\"==\\" | \\">\\" | \\">=\\" | \\"~=\\""},{"name":"rhs","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":72,"path":"lib/Semver/init.luau"}},{"name":"getMaxMatching","desc":"**Usage:**\\n```lua\\nlocal maxVersion = Semver.getMaxMatching(versions, req)\\n```","params":[{"name":"versions","desc":"","lua_type":"{ string }"},{"name":"versionReq","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string?\\n"}],"function_type":"static","source":{"line":99,"path":"lib/Semver/init.luau"}},{"name":"getMinMatching","desc":"**Usage:**\\n```lua\\nlocal minVersion = Semver.getMinMatching(versions, req)\\n```","params":[{"name":"versions","desc":"","lua_type":"{ string }"},{"name":"versionReq","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string?\\n"}],"function_type":"static","source":{"line":119,"path":"lib/Semver/init.luau"}},{"name":"matches","desc":"**Usage:**\\n```lua\\nassert(Semver.matches(versionStr, \\"^1.0.4\\"), \\"version does not match requirement\\")\\n```","params":[{"name":"version","desc":"","lua_type":"string"},{"name":"versionReq","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":139,"path":"lib/Semver/init.luau"}},{"name":"setMemoizationFunc","desc":"The performance of the Semver library can be improved by setting a memoization function. Memoization functions can prevent repeated parsing of semver strings\\n(Note: Memoization functions can be found in the [luau-caching-and-memoization](https://github.com/tim7775/luau-caching-and-memoization) repository).\\n\\n**Usage:**\\n```lua\\nSemver.setMemoizationFunc(\\"Version\\", memoizeFrame)\\nSemver.setMemoizationFunc(\\"VersionReq\\", function(parseFunc)\\n\\treturn memoizeRecentlyUsed(50, parseFunc)\\nend)\\n```","params":[{"name":"objToMemoize","desc":"","lua_type":"\\"Version\\" | \\"VersionReq\\""},{"name":"memoizationFunc","desc":"","lua_type":"<T>(parseFunc<T>)->parseFunc<T>"}],"returns":[],"function_type":"static","source":{"line":164,"path":"lib/Semver/init.luau"}},{"name":"validateVersion","desc":"**Usage:**\\n```lua\\nassert(Semver.validateVersion(versionStr))\\n```","params":[{"name":"version","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"},{"desc":"","lua_type":"string?"}],"function_type":"static","source":{"line":178,"path":"lib/Semver/init.luau"}},{"name":"validateVersionReq","desc":"**Usage:**\\n```lua\\nassert(Semver.validateVersionReq(reqStr))\\n```","params":[{"name":"versionReq","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"},{"desc":"","lua_type":"string?"}],"function_type":"static","source":{"line":189,"path":"lib/Semver/init.luau"}}],"properties":[],"types":[{"name":"parseFunc","desc":"","lua_type":"<T>(string)->T","source":{"line":149,"path":"lib/Semver/init.luau"}}],"name":"Semver","desc":"An idiomatic Luau API wrapper for the Rust-style API found in `cargo-semver`.","source":{"line":27,"path":"lib/Semver/init.luau"}}')}}]);