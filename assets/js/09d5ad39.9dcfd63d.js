"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>v});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?t.createElement(v,s(s({ref:r},p),{},{components:n})):t.createElement(v,s({ref:r},p))}));function v(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84381:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(87462),a=(n(67294),n(3905));const o={sidebar_position:4},s="Examples",i={unversionedId:"examples",id:"examples",title:"Examples",description:"Semver API",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/luau-cargo-semver/docs/examples",draft:!1,editUrl:"https://github.com/Tim7775/luau-cargo-semver/edit/main/docs/examples.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Specification",permalink:"/luau-cargo-semver/docs/specification"},next:{title:"Memoization",permalink:"/luau-cargo-semver/docs/memoization"}},l={},c=[{value:"Semver API",id:"semver-api",level:3},{value:"CargoSemver API",id:"cargosemver-api",level:3}],p={toc:c},m="wrapper";function u(e){let{components:r,...n}=e;return(0,a.kt)(m,(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"semver-api"},"Semver API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Semver = require("luau-cargo-semver/lib/Semver")\n\ndo\n    local req = ">=1.2.3, <1.8.0"\n\n    -- Check whether this requirement matches version 1.2.3-alpha.1 (no)\n    assert(not Semver.matches("1.2.3-alpha.1", req), "assertion failed!")\n\n    -- Check whether it matches 1.3.0 (yes it does)\n    assert(Semver.matches("1.3.0", req), "assertion failed!")\n\n    -- Compare versions\n    assert(Semver.cmp("1.3.0", "~=", "1.3.0+build"), "assertion failed!")\n    assert(Semver.cmpPrecedence("1.3.0", "==", "1.3.0+build"), "assertion failed!")\n\n    -- Sort versions array\n    local versions = { "3.1.2", "1.0.0", "1.0.0-rc.1", "1.0.0-rc.2", "0.3.0-alpha", "0.3.0-beta" }\n    table.sort(versions, function(a, b)\n        return Semver.cmp(a, "<", b)\n    end)\n    print(versions)\nend\n')),(0,a.kt)("h3",{id:"cargosemver-api"},"CargoSemver API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local CargoSemver = require("luau-cargo-semver/lib/CargoSemver/src")\nlocal BuildMetadata, Prerelease, Version, VersionReq, Ordering =\n    CargoSemver.BuildMetadata, CargoSemver.Prerelease, CargoSemver.Version, CargoSemver.VersionReq, CargoSemver.Ordering\n\ndo\n    local req = VersionReq.parse(">=1.2.3, <1.8.0")\n\n    -- Check whether this requirement matches version 1.2.3-alpha.1 (no)\n    local ver = Version.new(1, 2, 3, Prerelease.new("alpha.1"), BuildMetadata.EMPTY)\n    assert(not req:matches(ver), "assertion failed!")\n\n    -- Check whether it matches 1.3.0 (yes it does)\n    ver = Version.parse("1.3.0")\n    assert(req:matches(ver), "assertion failed!")\n\n    -- Compare versions\n    local verBuild = Version.parse("1.3.0+build")\n    assert(ver ~= verBuild, "assertion failed!")\n    assert(ver:cmp_precedence(verBuild) == Ordering.Equal, "assertion failed!")\n\n    -- Sort versions array\n    local versions = {\n        Version.parse("3.1.2"),\n        Version.parse("1.0.0"),\n        Version.parse("1.0.0-rc.1"),\n        Version.parse("1.0.0-rc.2"),\n        Version.parse("0.3.0-alpha"),\n        Version.parse("0.3.0-beta"),\n    }\n    table.sort(versions)\n    print(versions)\nend\n')))}u.isMDXComponent=!0}}]);