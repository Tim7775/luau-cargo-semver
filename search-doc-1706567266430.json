[{"title":"BuildMetadata","type":0,"sectionRef":"#","url":"/luau-cargo-semver/api/BuildMetadata","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#properties","content":" "},{"title":"EMPTY​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#EMPTY","content":"This item is read only and cannot be modified. Read Only Static &lt;/&gt; BuildMetadata.EMPTY: BuildMetadata Usage: local ver = Version.new(1, 0, 0, Prerelease.EMPTY, BuildMetadata.EMPTY)  "},{"title":"Functions​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#functions","content":" "},{"title":"new​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#new","content":"&lt;/&gt; BuildMetadata.new(input: string) → BuildMetadata   "},{"title":"is​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#is","content":"&lt;/&gt; BuildMetadata.is(obj: any) → boolean Returns true if obj is BuildMetadata.  "},{"title":"is_empty​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#is_empty","content":"&lt;/&gt; BuildMetadata:is_empty() → boolean   "},{"title":"__tostring​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#__tostring","content":"&lt;/&gt; BuildMetadata:__tostring() → string This metamethod transforms self into a string.  "},{"title":"__len​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#__len","content":"&lt;/&gt; BuildMetadata:__len() → number This metamethod returns the length of self and is used by the # length operator.  "},{"title":"__eq​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#__eq","content":"&lt;/&gt; BuildMetadata:__eq(other: BuildMetadata) → boolean This metamethod tests for self and other values to be equal and is used by the operators == and ~=.  "},{"title":"__lt​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#__lt","content":"&lt;/&gt; BuildMetadata:__lt(other: BuildMetadata) → boolean This metamethod tests less than (for self and other) and is used by the operators &lt; and &gt;.  "},{"title":"__le​","type":1,"pageTitle":"BuildMetadata","url":"/luau-cargo-semver/api/BuildMetadata#__le","content":"&lt;/&gt; BuildMetadata:__le(other: BuildMetadata) → boolean This metamethod tests less than or equal to (for self and other) and is used by the operators &lt;= and &gt;=. "},{"title":"Semver","type":0,"sectionRef":"#","url":"/luau-cargo-semver/api/Semver","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#functions","content":" "},{"title":"cmp​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#cmp","content":"&lt;/&gt; Semver.cmp( lhs: string, op: &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;==&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; | &quot;~=&quot;, rhs: string ) → boolean Compare the major, minor, patch, Prerelease and BuildMetadata value of two Versions. Usage: -- Sort versions array local versions = { &quot;3.1.2&quot;, &quot;1.0.0&quot;, &quot;1.0.0-rc.1&quot;, &quot;1.0.0-rc.2&quot;, &quot;0.3.0-alpha&quot;, &quot;0.3.0-beta&quot; } table.sort(versions, function(a, b) return Semver.cmp(a, &quot;&lt;&quot;, b) end)   "},{"title":"cmpPrecedence​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#cmpPrecedence","content":"&lt;/&gt; Semver.cmpPrecedence( lhs: string, op: &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;==&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; | &quot;~=&quot;, rhs: string ) → boolean Compare the major, minor, patch and Prerelease value of two Versions, disregarding BuildMetadata. Versions that differ only in BuildMetadata are considered equal. This comparison is what the SemVer spec refers to as &quot;precedence&quot;. Usage: assert(Semver.cmpPrecedence(newVersion, &quot;&gt;=&quot;, oldVersion), &quot;newVersion must be &gt;= oldVersion&quot;)   "},{"title":"getMaxMatching​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#getMaxMatching","content":"&lt;/&gt; Semver.getMaxMatching( versions: {string}, versionReq: string ) → string? Usage: local versions = { &quot;3.1.2&quot;, &quot;0.3.0&quot;, &quot;1.0.0&quot;, &quot;1.6.0&quot; } print(Semver.getMaxMatching(versions, &quot;^1.0.0&quot;)) --&gt; 1.6.0   "},{"title":"getMinMatching​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#getMinMatching","content":"&lt;/&gt; Semver.getMinMatching( versions: {string}, versionReq: string ) → string? Usage: local versions = { &quot;3.1.2&quot;, &quot;0.3.0&quot;, &quot;1.0.0&quot;, &quot;1.6.0&quot; } print(Semver.getMinMatching(versions, &quot;^1.0.0&quot;)) --&gt; 1.0.0   "},{"title":"matches​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#matches","content":"&lt;/&gt; Semver.matches( version: string, versionReq: string ) → boolean Usage: assert(Semver.matches(versionStr, &quot;^1.0.0&quot;), &quot;version does not match requirement&quot;)   "},{"title":"setMemoizationFunc​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#setMemoizationFunc","content":"&lt;/&gt; Semver.setMemoizationFunc( objToMemoize: &quot;Version&quot; | &quot;VersionReq&quot;, memoizationFunc: &lt;T&gt;((string) → T) → (string) → T ) → () Registers a memoization function for Version.parse or VersionReq.parse, this can prevent repeated parsing of semver strings and greatly improve the performance of the Semver library. 💡 Tip: Memoization functions can be found in the luau-caching-and-memoization repository. Usage: Semver.setMemoizationFunc(&quot;Version&quot;, memoizeFrame) Semver.setMemoizationFunc(&quot;VersionReq&quot;, function(parseFunc) return memoizeRecentlyUsed(50, parseFunc) end)   "},{"title":"validateVersion​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#validateVersion","content":"&lt;/&gt; Semver.validateVersion(version: string) → ( boolean, string? ) Usage: assert(Semver.validateVersion(&quot;1.0&quot;)) --&gt; Error: unexpected end of input while parsing minor version number   "},{"title":"validateVersionReq​","type":1,"pageTitle":"Semver","url":"/luau-cargo-semver/api/Semver#validateVersionReq","content":"&lt;/&gt; Semver.validateVersionReq(versionReq: string) → ( boolean, string? ) Usage: assert(Semver.validateVersionReq(&quot;1.0.a&quot;)) --&gt; Error: unexpected character 'a' while parsing patch version number  "},{"title":"Comparator","type":0,"sectionRef":"#","url":"/luau-cargo-semver/api/Comparator","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#properties","content":" "},{"title":"op​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#op","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Comparator.op: &quot;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;~&quot; | &quot;^&quot; | &quot;*&quot;   "},{"title":"major​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#major","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Comparator.major: number   "},{"title":"minor​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#minor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Comparator.minor: number?   "},{"title":"patch​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#patch","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Comparator.patch: number?   "},{"title":"pre​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#pre","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Comparator.pre: Prerelease  "},{"title":"Functions​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#functions","content":" "},{"title":"parse​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#parse","content":"&lt;/&gt; Comparator.parse(input: string) → Comparator   "},{"title":"is​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#is","content":"&lt;/&gt; Comparator.is(obj: any) → boolean Returns true if obj is a Comparator.  "},{"title":"__eq​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#__eq","content":"&lt;/&gt; Comparator:__eq(other: Comparator) → boolean This metamethod tests for self and other values to be equal and is used by the operators == and ~=.  "},{"title":"__tostring​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#__tostring","content":"&lt;/&gt; Comparator:__tostring() → string This metamethod transforms self into a string.  "},{"title":"matches​","type":1,"pageTitle":"Comparator","url":"/luau-cargo-semver/api/Comparator#matches","content":"&lt;/&gt; Comparator:matches(ver: Version) → boolean  "},{"title":"Prerelease","type":0,"sectionRef":"#","url":"/luau-cargo-semver/api/Prerelease","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#properties","content":" "},{"title":"EMPTY​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#EMPTY","content":"This item is read only and cannot be modified. Read Only Static &lt;/&gt; Prerelease.EMPTY: Prerelease Usage: local ver = Version.new(1, 0, 0, Prerelease.EMPTY, BuildMetadata.EMPTY)  "},{"title":"Functions​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#new","content":"&lt;/&gt; Prerelease.new(input: string) → Prerelease   "},{"title":"is​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#is","content":"&lt;/&gt; Prerelease.is(obj: any) → boolean Returns true if obj is a Prerelease.  "},{"title":"is_empty​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#is_empty","content":"&lt;/&gt; Prerelease:is_empty() → boolean   "},{"title":"__tostring​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#__tostring","content":"&lt;/&gt; Prerelease:__tostring() → string This metamethod transforms self into a string.  "},{"title":"__len​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#__len","content":"&lt;/&gt; Prerelease:__len() → number This metamethod returns the length of self and is used by the # length operator.  "},{"title":"__eq​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#__eq","content":"&lt;/&gt; Prerelease:__eq(other: Prerelease) → boolean This metamethod tests for self and other values to be equal and is used by the operators == and ~=.  "},{"title":"__lt​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#__lt","content":"&lt;/&gt; Prerelease:__lt(other: Prerelease) → boolean This metamethod tests less than (for self and other) and is used by the operators &lt; and &gt;.  "},{"title":"__le​","type":1,"pageTitle":"Prerelease","url":"/luau-cargo-semver/api/Prerelease#__le","content":"&lt;/&gt; Prerelease:__le(other: Prerelease) → boolean This metamethod tests less than or equal to (for self and other) and is used by the operators &lt;= and &gt;=. "},{"title":"Version","type":0,"sectionRef":"#","url":"/luau-cargo-semver/api/Version","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#properties","content":" "},{"title":"major​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#major","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Version.major: number   "},{"title":"minor​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#minor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Version.minor: number   "},{"title":"patch​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#patch","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Version.patch: number   "},{"title":"pre​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#pre","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Version.pre: Prerelease   "},{"title":"build​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#build","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Version.build: BuildMetadata  "},{"title":"Functions​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#new","content":"&lt;/&gt; Version.new( major: number, minor: number, patch: number, pre: Prerelease, build: BuildMetadata ) → Version   "},{"title":"parse​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#parse","content":"&lt;/&gt; Version.parse(input: string) → Version Possible reasons for the parse to fail include: "},{"title":"Errors","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version##","content":"Type\tDescriptionUnexpectedEnd (&quot;1.0&quot;)\ttoo few numeric components. A SemVer version must have exactly three. If you are looking at something that has fewer than three numbers in it, it’s possible it is a VersionReq instead (with an implicit default ^ comparison operator). LeadingZero (&quot;1.0.01&quot;)\ta numeric component has a leading zero. UnexpectedChar (&quot;1.0.unknown&quot;)\tunexpected character in one of the components. EmptySegment (&quot;1.0.0-&quot; or &quot;1.0.0+&quot;)\tthe pre-release or build metadata are indicated present but empty. UnexpectedCharAfter (&quot;1.0.0-alpha_123&quot;)\tpre-release or build metadata have something outside the allowed characters, which are 0-9, A-Z, a-z, -, and . (dot). Overflow (&quot;9007199254740992.0.0&quot;)\tvalue of major, minor or patch exceeds LUAU_MAX_PRECISE_INT (2^53 - 1). MaxIdentifierLength (&quot;1.0.0-&quot; .. string.rep(&quot;a&quot;, 513))\tidentifier length exceeds MAX_IDENTIFIER_LENGTH (512).  "},{"title":"is​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#is","content":"&lt;/&gt; Version.is(obj: any) → boolean Returns true if obj is a Version.  "},{"title":"__tostring​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#__tostring","content":"&lt;/&gt; Version:__tostring() → string This metamethod transforms self into a string.  "},{"title":"__eq​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#__eq","content":"&lt;/&gt; Version:__eq(other: Version) → boolean This metamethod tests for self and other values to be equal and is used by the operators == and ~=.  "},{"title":"__lt​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#__lt","content":"&lt;/&gt; Version:__lt(other: Version) → boolean This metamethod tests less than (for self and other) and is used by the operators &lt; and &gt;.  "},{"title":"__le​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#__le","content":"&lt;/&gt; Version:__le(other: Version) → boolean This metamethod tests less than or equal to (for self and other) and is used by the operators &lt;= and &gt;=.  "},{"title":"cmp_precedence​","type":1,"pageTitle":"Version","url":"/luau-cargo-semver/api/Version#cmp_precedence","content":"&lt;/&gt; Version:cmp_precedence(other: Version) → -1 | 0 | 1 Compare the major, minor, patch and Prerelease value of self and other. Unlike the relational operators, this method disregards BuildMetadata and considers Versions that differ only in BuildMetadata equal. This comparison is what the SemVer spec refers to as &quot;precedence&quot;. Returns: -1 if self has lower precedence than other 0 if self and other have the same precedence 1 if self has higher precedence than other The CargoSemver.Ordering enum (with the fields: Less = -1, Equal = 0, Greater = 1) can be used to clarify code using this method. Usage: if removedVersion:cmp_precedence(addedVersion) == Ordering.Greater then warn(&quot;Downgrading&quot;, msg) else print(&quot;Updating&quot;, msg) end  "},{"title":"Installation","type":0,"sectionRef":"#","url":"/luau-cargo-semver/docs/installation","content":"","keywords":""},{"title":"Method 1 - Git Submodule​","type":1,"pageTitle":"Installation","url":"/luau-cargo-semver/docs/installation#method-1---git-submodule","content":"Add the luau-cargo-semver repository as a git submodule (Git Submodules explanation): git submodule add https://github.com/Tim7775/luau-cargo-semver.git/ .lune/luau-cargo-semver  Scripts in the .lune folder can now require Semver as follows: local Semver = require(&quot;./luau-cargo-semver/lib/Semver&quot;)  "},{"title":"Method 2 - Wally package (Roblox)​","type":1,"pageTitle":"Installation","url":"/luau-cargo-semver/docs/installation#method-2---wally-package-roblox","content":"Add Semver to your wally.toml dependency list: [dependencies] Semver = &quot;tim7775/semver@1&quot;  Require Semver like any other module grabbed from Wally. ℹ️ Note: Not familiar with Wally? Wally is a package manager (like npm) for the Roblox ecosystem. To get started, check out the Wally repository. "},{"title":"Method 3 - Manual (Roblox)​","type":1,"pageTitle":"Installation","url":"/luau-cargo-semver/docs/installation#method-3---manual-roblox","content":"Visit the latest releaseUnder Assets, click luau-cargo-semver.rbxmOpen Roblox Studio and drag the file into the explorer "},{"title":"VersionReq","type":0,"sectionRef":"#","url":"/luau-cargo-semver/api/VersionReq","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#properties","content":" "},{"title":"comparators​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#comparators","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; VersionReq.comparators: {Comparator}   "},{"title":"STAR​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#STAR","content":"This item is read only and cannot be modified. Read Only Static &lt;/&gt; VersionReq.STAR: VersionReq A VersionReq with no constraint on the version numbers it matches. Equivalent to VersionReq.parse(&quot;*&quot;). In terms of comparators this is equivalent to &gt;=0.0.0. Counterintuitively a * VersionReq does not match every possible version number. In particular, in order for any VersionReq to match a pre-release version, the VersionReq must contain at least one Comparator that has an explicit major, minor, and patch version identical to the pre-release being matched, and that has a nonempty pre-release component. Since * is not written with an explicit major, minor, and patch version, and does not contain a nonempty pre-release component, it does not match any pre-release versions. "},{"title":"Functions​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#functions","content":" "},{"title":"parse​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#parse","content":"&lt;/&gt; VersionReq.parse(input: string) → VersionReq Possible reasons for the parse to fail include: "},{"title":"Errors","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq##","content":"Type\tDescriptionUnexpectedChar (&quot;&gt;a.b&quot;)\tunexpected characters in the partial version. UnexpectedChar (&quot;@1.0.0)\tunrecognized comparison operator. UnexpectedEnd (&quot;^1.0.0,&quot;)\tunexpected end of input. ExpectedCommaFound (&quot;&gt;=1.0 &lt;2.0&quot;)\tmissing comma between comparators. UnexpectedAfterWildcard (&quot;*.*&quot;)\tunsupported wildcard syntax.  "},{"title":"is​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#is","content":"&lt;/&gt; VersionReq.is(obj: any) → boolean Returns true if obj is a VersionReq.  "},{"title":"matches​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#matches","content":"&lt;/&gt; VersionReq:matches(ver: Version) → boolean Evaluate whether the given Version satisfies the version requirement described by self.  "},{"title":"__tostring​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#__tostring","content":"&lt;/&gt; VersionReq:__tostring() → string This metamethod transforms self into a string.  "},{"title":"__eq​","type":1,"pageTitle":"VersionReq","url":"/luau-cargo-semver/api/VersionReq#__eq","content":"&lt;/&gt; VersionReq:__eq(other: VersionReq) → boolean This metamethod tests for self and other values to be equal and is used by the operators == and ~=. "},{"title":"Getting Started with Semver","type":0,"sectionRef":"#","url":"/luau-cargo-semver/docs/intro","content":"Getting Started with Semver Here are some quick links to get started using Semver: Installation guideAPI DocsSpecificationExamplesMemoization","keywords":""},{"title":"Specification","type":0,"sectionRef":"#","url":"/luau-cargo-semver/docs/specification","content":"Specification The goal of this library is to replicate the exact behavior of the Rust crate semver (currently v1.0.20) used by Cargo (and Wally, Foreman and Aftman). It succeeds in this with only minor deviations that should only ever present themselves when dealing with hostile user input. Deviations from Cargo's semver:​ Identifiers (Prerelease and BuildMetadata) have a maximum length of 512 characters (Note: This should be more than enough for all use cases. For context, npm has a limit of 256 characters for the complete semver string).Major, minor and patch version numbers overflow at LUAU_MAX_PRECISE_INT (2^53 - 1) instead of u64::MAX (2^63 - 1) (Note: Numbers in identifiers do not have this limitation, they get compared with arbitrary-precision).","keywords":""},{"title":"Examples","type":0,"sectionRef":"#","url":"/luau-cargo-semver/docs/examples","content":"","keywords":""},{"title":"Semver API​","type":1,"pageTitle":"Examples","url":"/luau-cargo-semver/docs/examples#semver-api","content":"local Semver = require(&quot;luau-cargo-semver/lib/Semver&quot;) do local req = &quot;&gt;=1.2.3, &lt;1.8.0&quot; -- Check whether this requirement matches version 1.2.3-alpha.1 (no) assert(not Semver.matches(&quot;1.2.3-alpha.1&quot;, req), &quot;assertion failed!&quot;) -- Check whether it matches 1.3.0 (yes it does) assert(Semver.matches(&quot;1.3.0&quot;, req), &quot;assertion failed!&quot;) -- Compare versions assert(Semver.cmp(&quot;1.3.0&quot;, &quot;~=&quot;, &quot;1.3.0+build&quot;), &quot;assertion failed!&quot;) assert(Semver.cmpPrecedence(&quot;1.3.0&quot;, &quot;==&quot;, &quot;1.3.0+build&quot;), &quot;assertion failed!&quot;) -- Sort versions array local versions = { &quot;3.1.2&quot;, &quot;1.0.0&quot;, &quot;1.0.0-rc.1&quot;, &quot;1.0.0-rc.2&quot;, &quot;0.3.0-alpha&quot;, &quot;0.3.0-beta&quot; } table.sort(versions, function(a, b) return Semver.cmp(a, &quot;&lt;&quot;, b) end) print(versions) end  "},{"title":"CargoSemver API​","type":1,"pageTitle":"Examples","url":"/luau-cargo-semver/docs/examples#cargosemver-api","content":"local CargoSemver = require(&quot;luau-cargo-semver/lib/CargoSemver/src&quot;) local BuildMetadata, Prerelease, Version, VersionReq, Ordering = CargoSemver.BuildMetadata, CargoSemver.Prerelease, CargoSemver.Version, CargoSemver.VersionReq, CargoSemver.Ordering do local req = VersionReq.parse(&quot;&gt;=1.2.3, &lt;1.8.0&quot;) -- Check whether this requirement matches version 1.2.3-alpha.1 (no) local ver = Version.new(1, 2, 3, Prerelease.new(&quot;alpha.1&quot;), BuildMetadata.EMPTY) assert(not req:matches(ver), &quot;assertion failed!&quot;) -- Check whether it matches 1.3.0 (yes it does) ver = Version.parse(&quot;1.3.0&quot;) assert(req:matches(ver), &quot;assertion failed!&quot;) -- Compare versions local verBuild = Version.parse(&quot;1.3.0+build&quot;) assert(ver ~= verBuild, &quot;assertion failed!&quot;) assert(ver:cmp_precedence(verBuild) == Ordering.Equal, &quot;assertion failed!&quot;) -- Sort versions array local versions = { Version.parse(&quot;3.1.2&quot;), Version.parse(&quot;1.0.0&quot;), Version.parse(&quot;1.0.0-rc.1&quot;), Version.parse(&quot;1.0.0-rc.2&quot;), Version.parse(&quot;0.3.0-alpha&quot;), Version.parse(&quot;0.3.0-beta&quot;), } table.sort(versions) print(versions) end  "},{"title":"Memoization","type":0,"sectionRef":"#","url":"/luau-cargo-semver/docs/memoization","content":"","keywords":""},{"title":"Example:​","type":1,"pageTitle":"Memoization","url":"/luau-cargo-semver/docs/memoization#example","content":"Semver.setMemoizationFunc(&quot;Version&quot;, memoizeFrame) Semver.setMemoizationFunc(&quot;VersionReq&quot;, function(parseFunc) return memoizeRecentlyUsed(50, parseFunc) end)  "}]